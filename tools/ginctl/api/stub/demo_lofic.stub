package {{.LowerModel}}

import (
	"github.com/gin-ctl/zero/app/http/{{.Apply}}/logic"
	"github.com/gin-ctl/zero/package/http"
	"github.com/gin-gonic/gin"
)

type Logic struct{}

func New{{.Model}}Logic() *Logic {
	return &Logic{}
}

// Index Query list.
func (l *Logic) Index(c *gin.Context) {
	params, err := logic.ParseAndCheckParams[Index](c)
	if err != nil {
		http.Alert400(c, http.StatusBadRequest, err.Error())
		return
	}
	// TODO: Your logic.

	// TODO: Replace your return struct
	http.SuccessWithData(c, params.Data())
}

// Show Get record details.
func (l *Logic) Show(c *gin.Context) {
	params, err := logic.ParseAndCheckParams[Info](c)
	if err != nil {
		http.Alert400(c, http.StatusBadRequest, err.Error())
		return
	}
	// TODO: Your logic.

	// TODO: Replace your return struct
	http.SuccessWithData(c, params.Data())
}

// Create a record.
func (l *Logic) Create(c *gin.Context) {
	params, err := logic.ParseAndCheckParams[Create](c)
	if err != nil {
		http.Alert400(c, http.StatusBadRequest, err.Error())
		return
	}
	// TODO: Your logic.

	// TODO: Replace your return struct
	http.SuccessWithData(c, params.Data())
}

// Update a record.
func (l *Logic) Update(c *gin.Context) {
	params, err := logic.ParseAndCheckParams[Update](c)
	if err != nil {
		http.Alert400(c, http.StatusBadRequest, err.Error())
		return
	}
	// TODO: Your logic.

	// TODO: Replace your return struct
	http.SuccessWithData(c, params.Data())
}

// Destroy Permanently delete a record.
func (l *Logic) Destroy(c *gin.Context) {
	params, err := logic.ParseAndCheckParams[Info](c)
	if err != nil {
		http.Alert400(c, http.StatusBadRequest, err.Error())
		return
	}
	// TODO: Your logic.

	// TODO: Replace your return struct
	http.SuccessWithData(c, params.Data())
}
